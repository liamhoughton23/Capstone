@model CAPSTONE.Models.Location

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
@*<head>
    <style>
        #map {
            height: 400px;
            width: 800px;
        }
    </style>
</head>*@

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Location</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Locations, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Locations, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Locations, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Destination, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Destination, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Destination, "", new { @class = "text-danger" })
            </div>
        </div>
        @Html.HiddenFor(model => model.Latitude)
        @Html.HiddenFor(model => model.Longitude)
        @Html.HiddenFor(model => model.Latitude2)
        @Html.HiddenFor(model => model.Longitude2)
        @*<div class="form-group">
            @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@*<div id="map"></div>
<script>
    function initMap() {
        //try{
        var user = @Html.Raw(Json.Encode(Model));
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 4,
            center: new google.maps.LatLng(10,-87.3),
            mapTypeId: 'terrain'
        });
            for (i = 0; i < user.length; i++) {
                var myLatLng = new google.maps.LatLng(user[i]['Latitude'], user[i]['Longitude'])

                var marker = new google.maps.Marker({
                    position: myLatLng,
                    map: map
                });
                map.center = myLatLng;
            }
        }
        //catch(Exception){
        //        alert('Failed');
        //    }
        //}

</script>*@
@*<script type="text/javascript" src="AIzaSyCnjZExxF6uCz-ynsgHHKtJjJlhx8x3Bt8">
</script>*@

@*<script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCnjZExxF6uCz-ynsgHHKtJjJlhx8x3Bt8&callback=initMap">
    </script>*@

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
